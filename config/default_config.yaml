llm:
  provider: "deepseek"
  name: "deepseek-chat"
  temperature: 0.0
  top_p: 1.0
browser:
  name: "chrome"
  wait_for_timeout: 1000
fields:
  article_body:
    strategy: "xpath_extractor"
  title:
    strategy: "lm_capabilities"
  author:
    strategy: "lm_capabilities"
  datetime:
    strategy: "lm_capabilities"
prompts:
  reasoner:
    template: |
      You are a ReAct-style HTML extraction agent.

      GOAL:
      Ensure each field has the correct extracted TEXT from the HTML.
      XPath is just a tool; the objective is accurate content.

      Reasoning Rules:
      - **author** → should look like a human name, max 3-4 words.
      - **article_body** → should be a long coherent article.
      - **title** → should be a the article title.
      - **datetime** → should look like a publication date or time.

      ACTION POLICY:
      For every field:
      - Follow the field strategy declared below.
      - If the field uses XPath and the extracted text is empty, irrelevant, too short, or violates the rules → call the tool:
          store_xpath(key, new_xpath)
        to propose a **better XPath**.
      - If the field relies on LM Capabilities, store the final answer using:
          store_field_value(key, value)
      - If more than one cool tool is necessary, you should call multiple tools at a time.
      - If all of the extraction looks plausible and correct → do nothing.
      Stop when **all fields pass** these checks and LM fields have stored values.

      When proposing XPath, follow these strict rules:
      - Always use real tag names (div, section, span, time, h1, p, etc.)
      - Never use class names as tag names.
      - Use `contains(@class, '...')` to target classes.
      - Always start with '//' or '/html' and separate each tag with '/'.

      Example:
      ✅ //section[contains(@class, 'article-body')]//p/text()
      ❌ /html/body/main/article/section/article-details-body-container/article-body

      CURRENT XPATH MAP:
      {{xpath_snapshot}}

      FIELD STRATEGIES:
      {{field_strategies}}

      CURRENT EXTRACTIONS SUMMARY:
      {{formatted_extracts}}

      HTML:
      {{html_content}}
  summarizer:
    template: |
      Analyze this content and extract specific metadata.

      URL: {{url}}
      Title: {{title}}
      Author: {{author}}
      Date: {{datetime}}
      Content: {{content}}

      Instructions:
      1. For dates:
      - Publication date: When the content was published
      - Event date: When the described events occurred
      - Use YYYY-MM-DD format
      - For date ranges use: YYYY-MM-DD to YYYY-MM-DD
      - If only month/year available, use first day: YYYY-MM-01
      - If no date is available, return an empty string

      2. For content type, classify as:
      - Official Report: Research papers, formal investigations, detailed reports
      - Official Statement: Press releases, announcements, declarations
      - Opinion: Editorial content, opinion pieces, commentary
      - Testimony: First-hand accounts, witness statements
      - Journalistic Report: News articles, investigative journalism
      - Analysis: Analysis, commentary
      - Open letter: Letters to the editor, letters to the government, letters to the media
      - News: Breaking news, time-sensitive reporting
      - Post: Social media posts, short updates

      3. For media type, classify as:
      - Video: Video content, broadcasts
      - Photo: Photo galleries, image-focused content
      - Audio: Audio content, podcasts
      - Text: Text content, articles, reports

      4. For tags:
      - IMPORTANT: You must ONLY use tags from the following list. DO NOT create any new tags:
      {{allowed_tags}}
      - Select ONLY the most relevant tags from this list that are reflected in the content
      - Format as an array of strings
      - If no tags from the list apply, return an empty array

      Return a JSON object with these exact fields:

      {
          "summary": "One clear, informative sentence summarizing the main content",
          "date_published": "YYYY-MM-DD",
          "event_date": "YYYY-MM-DD or YYYY-MM-DD to YYYY-MM-DD",
          "type": "One of the content types listed above",
          "media": "One of the media types listed above",
          "language": "The primary language of the content",
          "platform": "The website or platform where content is published",
          "author": "The content author or organization",
          "tags": ["relevant", "topic", "tags"]
      }
      - All string values (including "summary" and "tags") **must be in English**.

      Important
      - Even if the content is in non-english language (e.g: Hebrew, French etc...) your output should be in *English*.
      - Extract information only from the provided content
      - Leave field empty ("") if information is not explicitly present
      - For platform, extract from the URL or content source
      - For language, specify if clearly identifiable
      - Tags should ONLY be from the provided list, do not create new ones
      - Search for publication date in the content's metadata
      - If no publication date is found, use the creation date of the content
      - Always return content processed in English
    field_mapping:
      title: "title"
      content: "article_body"
      author: "author"
      datetime: "datetime"
    allowed_tags_module: "config.allowed_tags:ALLOWED_TAGS"
